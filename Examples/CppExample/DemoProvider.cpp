// -----------------------------------------------------
//  This file was generated by EtwProviderGenerator.exe
// -----------------------------------------------------

#define _WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <evntrace.h>
#include <evntprov.h>
#include <strsafe.h>
#include "DemoProvider.h" 
#define ETW_DEBUG(...)
#define ETW_ENABLED_CHECK(enableBit) if ((ProviderEnableBits[enableBit >> 5] & (1 << (enableBit % 32))) == 0) { return; }

#define ETW_ANSI_PARAM(n, p) const char *arg##n = (p);\
    EventDataDescCreate(&eventData[n],\
            (arg##n != nullptr) ? arg##n : "NULL",\
            (arg##n != nullptr) ? (ULONG)(strlen(arg##n) + 1) : (ULONG)sizeof("NULL"));

#define ETW_UNICODE_PARAM(n, p) const wchar_t *arg##n = (p);\
    EventDataDescCreate(&eventData[n],\
            (arg##n != nullptr) ? arg##n : L"NULL",\
            (arg##n != nullptr) ? (ULONG)((wcslen(arg##n) + 1) * sizeof(wchar_t)) : (ULONG)sizeof(L"NULL"));

#define ETW_LITERAL_PARAM(type, n, p) type arg##n = (p);\
    EventDataDescCreate(&eventData[n], &arg##n, sizeof(arg##n));

#define ETW_PTR_PARAM(type, n, p) type arg##n = (p);\
    EventDataDescCreate(&eventData[n], arg##n, sizeof(*arg##n));

#define ETW_COUNTED_PTR_PARAM(type, n, p, l) type arg##n = (p);\
	EventDataDescCreate(&eventData[n], arg##n, (l) * sizeof(*arg##n));

static const char *etwManifest[] = {
    "<instrumentationManifest xmlns=\"http://schemas.microsoft.com/win/2004/08/events\">\r\n  <instrumentation xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"htt"
    "p://www.w3.org/2001/XMLSchema-instance\" xmlns:win=\"http://manifests.microsoft.com/win/2004/08/windows/events\">\r\n    <events xmlns=\"http://schemas.microsoft.com/"
    "win/2004/08/events\">\r\n      <provider name=\"DemoProvider\" guid=\"{8FA35E30-953E-59E2-2569-A6B315EB8F36}\" symbol=\"TPSYM\" resourceFileName=\"DemoProvider\" messageFi"
    "leName=\"DemoProvider\">\r\n        <events>\r\n          <event symbol=\"EBlank\" value=\"0\" version=\"0\">\r\n          </event>\r\n          <event symbol=\"EAnsi\" value=\"1\""
    " version=\"0\" template=\"EAnsi\">\r\n          </event>\r\n          <event symbol=\"EUnicode\" value=\"2\" version=\"0\" template=\"EUnicode\">\r\n          </event>\r\n         "
    " <event symbol=\"EFixedLength\" value=\"3\" version=\"0\" template=\"EFixedLength\">\r\n          </event>\r\n          <event symbol=\"ESByte\" value=\"4\" version=\"0\" templat"
    "e=\"ESByte\">\r\n          </event>\r\n          <event symbol=\"EUByte\" value=\"5\" version=\"0\" template=\"EUByte\">\r\n          </event>\r\n          <event symbol=\"ECustCh"
    "annel\" value=\"6\" version=\"0\" channel=\"CustChannel\" level=\"win:Warning\" message=\"$(string.DemoProvider.event.6.message)\">\r\n          </event>\r\n          <event s"
    "ymbol=\"EDisabledChannel\" value=\"7\" version=\"0\" channel=\"DisabledChannel\">\r\n          </event>\r\n          <event symbol=\"EAnalyticChannel\" value=\"8\" version=\"0\" "
    "channel=\"AnalyticChannel\">\r\n          </event>\r\n          <event symbol=\"EDebugChannel\" value=\"9\" version=\"0\" channel=\"DebugChannel\">\r\n          </event>\r\n     "
    "     <event symbol=\"ETraceClassicChan\" value=\"10\" version=\"0\" channel=\"TraceClassic\">\r\n          </event>\r\n          <event symbol=\"ESystemChan\" value=\"11\" vers"
    "ion=\"0\" channel=\"System\" level=\"win:Informational\" message=\"$(string.DemoProvider.event.11.message)\">\r\n          </event>\r\n          <event symbol=\"EAppChannel\""
    " value=\"12\" version=\"0\" channel=\"Application\" level=\"win:Error\" message=\"$(string.DemoProvider.event.12.message)\">\r\n          </event>\r\n          <event symbol="
    "\"ESecChannel\" value=\"13\" version=\"0\" channel=\"Security\" level=\"win:Critical\" message=\"$(string.DemoProvider.event.13.message)\">\r\n          </event>\r\n          <"
    "event symbol=\"EBitMap\" value=\"14\" version=\"0\" template=\"EBitMap\">\r\n          </event>\r\n          <event symbol=\"EValueMap\" value=\"15\" version=\"0\" template=\"EVal"
    "ueMap\">\r\n          </event>\r\n        </events><levels>\r\n          <level name=\"CustLevel1\" symbol=\"CUSTLEV1\" value=\"16\" message=\"$(string.DemoProvider.level.CUS"
    "TLEV1.message)\">\r\n          </level>\r\n          </levels>\r\n        \r\n        <tasks>\r\n          <task name=\"EventSourceMessage\" value=\"65534\"   message=\"$(strin"
    "g.DemoProvider.task.EventSourceMessage.message)\">\r\n          </task>\r\n        </tasks>\r\n        <opcodes>\r\n          <opcode name=\"CustOp1\" symbol=\"CUSTOP1\" val"
    "ue=\"10\" message=\"$(string.DemoProvider.opcode.CUSTOP1.message)\">\r\n          </opcode>\r\n          <opcode name=\"CustOp2\" symbol=\"CUSTOP2\" value=\"11\" message=\"$(s"
    "tring.DemoProvider.opcode.CUSTOP2.message)\">\r\n          </opcode>\r\n        </opcodes>\r\n        <channels>\r\n          <importChannel name=\"TraceLogging\" chid=\"Tr"
    "aceLogging\"/>\r\n          <importChannel name=\"Security\" chid=\"Security\"/>\r\n          <importChannel name=\"Application\" chid=\"Application\"/>\r\n          <importCh"
    "annel name=\"System\" chid=\"System\"/>\r\n          <importChannel name=\"TraceClassic\" chid=\"TraceClassic\"/>\r\n          <channel name=\"CustChannel\" chid=\"CustChannel"
    "\" symbol=\"ADCHAN\" type=\"Admin\" enabled=\"true\"  message=\"$(string.DemoProvider.channel.ADCHAN.message)\">\r\n          </channel>\r\n          <channel name=\"Disabled"
    "Channel\" chid=\"DisabledChannel\" symbol=\"DISCHAN\" type=\"Operational\" enabled=\"false\"  message=\"$(string.DemoProvider.channel.DISCHAN.message)\">\r\n          </chan"
    "nel>\r\n          <channel name=\"AnalyticChannel\" chid=\"AnalyticChannel\" symbol=\"ANALCHAN\" type=\"Analytic\" enabled=\"true\" isolation=\"Application\" message=\"$(strin"
    "g.DemoProvider.channel.ANALCHAN.message)\">\r\n          </channel>\r\n          <channel name=\"DebugChannel\" chid=\"DebugChannel\" symbol=\"DEBUGCHAN\" type=\"Debug\" ena"
    "bled=\"true\" isolation=\"System\" message=\"$(string.DemoProvider.channel.DEBUGCHAN.message)\">\r\n          </channel>\r\n        </channels>\r\n        <keywords>\r\n     "
    "     <keyword name=\"KeySmall\" symbol=\"KEYSMALL\" mask=\"0x1\" message=\"$(string.DemoProvider.Keyword.KEYSMALL.message)\">\r\n          </keyword>\r\n          <keyword "
    "name=\"Keyword1\" symbol=\"KEY1\" mask=\"0x80000000000\" message=\"$(string.DemoProvider.Keyword.KEY1.message)\">\r\n          </keyword>\r\n          <keyword name=\"Sessio"
    "n3\" symbol=\"Session3\" mask=\"0x100000000000\" message=\"$(string.DemoProvider.Keyword.Session3.message)\">\r\n          </keyword>\r\n          <keyword name=\"Session2\""
    " symbol=\"Session2\" mask=\"0x200000000000\" message=\"$(string.DemoProvider.Keyword.Session2.message)\">\r\n          </keyword>\r\n          <keyword name=\"Session1\" sy"
    "mbol=\"Session1\" mask=\"0x400000000000\" message=\"$(string.DemoProvider.Keyword.Session1.message)\">\r\n          </keyword>\r\n          <keyword name=\"Session0\" symbo"
    "l=\"Session0\" mask=\"0x800000000000\" message=\"$(string.DemoProvider.Keyword.Session0.message)\">\r\n          </keyword>\r\n        </keywords>\r\n        <maps>\r\n      "
    "    <bitMap name=\"BitMap1\">\r\n            <map value=\"0x1\" message=\"$(string.DemoProvider.map.BitMap1.1.message)\">\r\n            </map>\r\n            <map value=\"0"
    "x2\" message=\"$(string.DemoProvider.map.BitMap1.2.message)\">\r\n            </map>\r\n            <map value=\"0x4\" message=\"$(string.DemoProvider.map.BitMap1.4.messa"
    "ge)\">\r\n            </map>\r\n            <map value=\"0x8\" message=\"$(string.DemoProvider.map.BitMap1.8.message)\">\r\n            </map>\r\n          </bitMap>\r\n      "
    "    <valueMap name=\"ValMap1\">\r\n            <map value=\"1\" message=\"$(string.DemoProvider.map.ValMap1.1.message)\">\r\n            </map>\r\n            <map value=\"2"
    "\" message=\"$(string.DemoProvider.map.ValMap1.2.message)\">\r\n            </map>\r\n            <map value=\"1048576\" message=\"$(string.DemoProvider.map.ValMap1.10485"
    "76.message)\">\r\n            </map>\r\n            <map value=\"2147483647\" message=\"$(string.DemoProvider.map.ValMap1.2147483647.message)\">\r\n            </map>\r\n   "
    "       </valueMap>\r\n        </maps>\r\n        <templates>\r\n          <template tid=\"EAnsi\">\r\n            <data name=\"Ansi\" inType=\"win:AnsiString\" outType=\"xs:st"
    "ring\"  >\r\n            </data>\r\n          </template>\r\n          <template tid=\"EUnicode\">\r\n            <data name=\"Unicode\" inType=\"win:UnicodeString\" outType=\""
    "xs:string\"  >\r\n            </data>\r\n          </template>\r\n          <template tid=\"EFixedLength\">\r\n            <data name=\"FixedLen\" inType=\"win:UnicodeString\""
    " outType=\"xs:string\"  length=\"32\">\r\n            </data>\r\n          </template>\r\n          <template tid=\"ESByte\">\r\n            <data name=\"Val\" inType=\"win:Int8"
    "\" outType=\"xs:byte\"  >\r\n            </data>\r\n          </template>\r\n          <template tid=\"EUByte\">\r\n            <data name=\"Val\" inType=\"win:UInt8\" outType=\""
    "xs:unsignedByte\"  >\r\n            </data>\r\n          </template>\r\n          <template tid=\"EBitMap\">\r\n            <data name=\"map\" inType=\"win:UInt32\" map=\"BitMa"
    "p1\"  >\r\n            </data>\r\n          </template>\r\n          <template tid=\"EValueMap\">\r\n            <data name=\"map\" inType=\"win:UInt32\" map=\"ValMap1\"  >\r\n   "
    "         </data>\r\n          </template>\r\n        </templates>\r\n      </provider>\r\n    </events>\r\n  </instrumentation>\r\n  <localization>\r\n    <resources culture="
    "\"en-US\">\r\n      <stringTable>\r\n        <string id=\"DemoProvider.task.EventSourceMessage.message\" value=\"EventSourceMessage\">\r\n        </string>\r\n        <string"
    " id=\"DemoProvider.opcode.CUSTOP1.message\" value=\"A custom opcode\">\r\n        </string>\r\n        <string id=\"DemoProvider.opcode.CUSTOP2.message\" value=\"A second "
    "custom opcode\">\r\n        </string>\r\n        <string id=\"DemoProvider.map.BitMap1.1.message\" value=\"Odd\">\r\n        </string>\r\n        <string id=\"DemoProvider.ma"
    "p.BitMap1.2.message\" value=\"Doubles\">\r\n        </string>\r\n        <string id=\"DemoProvider.map.BitMap1.4.message\" value=\"CatLegs\">\r\n        </string>\r\n        <"
    "string id=\"DemoProvider.map.BitMap1.8.message\" value=\"SpiderLegs\">\r\n        </string>\r\n        <string id=\"DemoProvider.map.ValMap1.1.message\" value=\"Val1\">\r\n  "
    "      </string>\r\n        <string id=\"DemoProvider.map.ValMap1.2.message\" value=\"Val2\">\r\n        </string>\r\n        <string id=\"DemoProvider.map.ValMap1.1048576."
    "message\" value=\"Meg\">\r\n        </string>\r\n        <string id=\"DemoProvider.map.ValMap1.2147483647.message\" value=\"Huge\">\r\n        </string>\r\n        <string id="
    "\"DemoProvider.level.CUSTLEV1.message\" value=\"A custom level\">\r\n        </string>\r\n        <string id=\"DemoProvider.event.6.message\" value=\"Required message for "
    "Admin event (level also required)\">\r\n        </string>\r\n        <string id=\"DemoProvider.event.11.message\" value=\"Is Admin event\">\r\n        </string>\r\n        <"
    "string id=\"DemoProvider.event.12.message\" value=\"Is App channel\">\r\n        </string>\r\n        <string id=\"DemoProvider.event.13.message\" value=\"Is Security even"
    "t\">\r\n        </string>\r\n        <string id=\"DemoProvider.channel.ADCHAN.message\" value=\"An enabled admin channel\">\r\n        </string>\r\n        <string id=\"DemoP"
    "rovider.channel.DISCHAN.message\" value=\"A disabled operational channel\">\r\n        </string>\r\n        <string id=\"DemoProvider.channel.ANALCHAN.message\" value=\"A"
    "n enabled analytic channel with Application Isolation security\">\r\n        </string>\r\n        <string id=\"DemoProvider.channel.DEBUGCHAN.message\" value=\"An enabl"
    "ed debug channel with system isolation security\">\r\n        </string>\r\n        <string id=\"DemoProvider.Keyword.Session0.message\" value=\"Session0\">\r\n        </st"
    "ring>\r\n        <string id=\"DemoProvider.Keyword.Session1.message\" value=\"Session1\">\r\n        </string>\r\n        <string id=\"DemoProvider.Keyword.Session2.messag"
    "e\" value=\"Session2\">\r\n        </string>\r\n        <string id=\"DemoProvider.Keyword.Session3.message\" value=\"Session3\">\r\n        </string>\r\n        <string id=\"De"
    "moProvider.Keyword.KEY1.message\" value=\"A custom keyword\">\r\n        </string>\r\n        <string id=\"DemoProvider.Keyword.KEYSMALL.message\" value=\"Another custom "
    "keyword with a value of 1\">\r\n        </string>\r\n      </stringTable>\r\n    </resources>\r\n  </localization>\r\n</instrumentationManifest>"
};

const GUID ProviderGuid = {0x8fa35e30,0x953e,0x59e2,{0x25,0x69,0xa6,0xb3,0x15,0xeb,0x8f,0x36}}; // 8fa35e30-953e-59e2-2569-a6b315eb8f36

static const int EnableBitsCount = 5;
static REGHANDLE                 ProviderHandle = (REGHANDLE)0;
static DECLSPEC_CACHEALIGN ULONG ProviderEnableBits[1];
static const ULONGLONG           ProviderKeywords[EnableBitsCount] = {0x0, 0x0, 0x0, 0x0, 0x0};
static const UCHAR               ProviderLevels[EnableBitsCount] = {0x0, 0x3, 0x4, 0x2, 0x1};

                                                //  Id      Vers Chan Lvl  Opcode Task   Keyword
static const EVENT_DESCRIPTOR Event_EmitManifest = {0xfffe, 0x1, 0x0, 0x0, 0xfe, 0xfffe, 0x00FFFFFFFFFFFFFF};
static void EmitManifest()
{
    if (!ProviderHandle)
    {
        ETW_DEBUG("ETW_DEBUG: Skipping manifest emission due to uninitialised provider handle\n");
        return;
    }

    unsigned char format        = 1;
    unsigned char majorVersion  = 1;
    unsigned char minorVersion  = 0;
    unsigned char magicNumber   = 0x5b;
    unsigned short totalChunks  = (unsigned short)_countof(etwManifest);

	for(unsigned short i = 0; i < totalChunks; i++)
	{
	    EVENT_DATA_DESCRIPTOR eventData[7];
		EventDataDescCreate(&eventData[0], &format,        sizeof(format));
		EventDataDescCreate(&eventData[1], &majorVersion,  sizeof(majorVersion));
		EventDataDescCreate(&eventData[2], &minorVersion,  sizeof(minorVersion));
		EventDataDescCreate(&eventData[3], &magicNumber,   sizeof(magicNumber));
		EventDataDescCreate(&eventData[4], &totalChunks,   sizeof(totalChunks));
		EventDataDescCreate(&eventData[5], &i,             sizeof(i));
	    EventDataDescCreate(&eventData[6], etwManifest[i], (ULONG)strlen(etwManifest[i]));
        ETW_DEBUG("ETW_DEBUG: Emitting manifest chunk %d of %d\n", i+1, totalChunks);
	    EventWrite(ProviderHandle, &Event_EmitManifest, _countof(eventData), eventData);
	}
}

static void __stdcall ControlCallbackV2(LPCGUID, ULONG controlCode, UCHAR level, ULONGLONG matchAnyKeyword, ULONGLONG matchAllKeyword, PEVENT_FILTER_DESCRIPTOR, PVOID)
{
    switch (controlCode)
    {
        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            ETW_DEBUG("ETW_DEBUG: Provider enabled\n");
            for (ULONG ix = 0; ix < EnableBitsCount; ++ix)
            {
                bool levelMatched = (ProviderLevels[ix] <= level) || (level == 0);
                bool keywordMatched =
                    ((ProviderKeywords[ix] == (ULONGLONG)0) ||
                    ((ProviderKeywords[ix] & matchAnyKeyword) && ((ProviderKeywords[ix] & matchAllKeyword) == matchAllKeyword)));

                if (levelMatched && keywordMatched)
                {
                    ProviderEnableBits[ix >> 5] |= (1 << (ix % 32));
                }
                else
                {
                    ProviderEnableBits[ix >> 5] &= ~(1 << (ix % 32));
                }
            }
            EmitManifest();
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            ETW_DEBUG("ETW_DEBUG: Provider disabled\n");
            EmitManifest();
            if (EnableBitsCount > 0)
            {
                RtlZeroMemory(ProviderEnableBits, (EnableBitsCount + 31)/32 * sizeof(ULONG));
            }
            break;

        default:
            break;
    }
}

ULONG DemoProvider::Register() // This function registers the provider with ETW.
{
    if (ProviderHandle) // already registered
        return ERROR_SUCCESS;

    ETW_DEBUG("ETW_DEBUG: Registering provider\n");
    auto result = EventRegister(&ProviderGuid, ControlCallbackV2, nullptr, &ProviderHandle);
    if (ProviderHandle)
        EmitManifest();

    return result;
}

ULONG DemoProvider::Unregister() // Unregister the provider
{
    if (!ProviderHandle) // Provider has not been registered
        return ERROR_SUCCESS;

    ETW_DEBUG("ETW_DEBUG: Deregistering provider\n");
    EmitManifest();
    ULONG error = EventUnregister(ProviderHandle);
    ProviderHandle = (REGHANDLE)0;

    return error;
}

// Events
const EVENT_DESCRIPTOR Event_EBlank = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::EBlank()
{
    ETW_ENABLED_CHECK(0)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'EBlank'\n");
    EventWrite(ProviderHandle, &Event_EBlank, 0, nullptr);
}

const EVENT_DESCRIPTOR Event_EAnsi = {0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::EAnsi(const char * Ansi)
{
    ETW_ENABLED_CHECK(0)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'EAnsi'\n");
    EVENT_DATA_DESCRIPTOR eventData[1];
    ETW_ANSI_PARAM(0, Ansi)
    EventWrite(ProviderHandle, &Event_EAnsi, _countof(eventData), eventData);
}

const EVENT_DESCRIPTOR Event_EUnicode = {0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::EUnicode(const wchar_t * Unicode)
{
    ETW_ENABLED_CHECK(0)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'EUnicode'\n");
    EVENT_DATA_DESCRIPTOR eventData[1];
    ETW_UNICODE_PARAM(0, Unicode)
    EventWrite(ProviderHandle, &Event_EUnicode, _countof(eventData), eventData);
}

const EVENT_DESCRIPTOR Event_EFixedLength = {0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::EFixedLength(const wchar_t * FixedLen)
{
    ETW_ENABLED_CHECK(0)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'EFixedLength'\n");
    EVENT_DATA_DESCRIPTOR eventData[1];
    ETW_COUNTED_PTR_PARAM(const wchar_t *, 0, FixedLen, 32)
    EventWrite(ProviderHandle, &Event_EFixedLength, _countof(eventData), eventData);
}

const EVENT_DESCRIPTOR Event_ESByte = {0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::ESByte(char Val)
{
    ETW_ENABLED_CHECK(0)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'ESByte'\n");
    EVENT_DATA_DESCRIPTOR eventData[1];
    ETW_LITERAL_PARAM(const int8_t, 0, Val)
    EventWrite(ProviderHandle, &Event_ESByte, _countof(eventData), eventData);
}

const EVENT_DESCRIPTOR Event_EUByte = {0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::EUByte(unsigned char Val)
{
    ETW_ENABLED_CHECK(0)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'EUByte'\n");
    EVENT_DATA_DESCRIPTOR eventData[1];
    ETW_LITERAL_PARAM(const uint8_t, 0, Val)
    EventWrite(ProviderHandle, &Event_EUByte, _countof(eventData), eventData);
}

const EVENT_DESCRIPTOR Event_ECustChannel = {0x6, 0x0, 0x10, 0x3, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::ECustChannel()
{
    ETW_ENABLED_CHECK(1)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'ECustChannel'\n");
    EventWrite(ProviderHandle, &Event_ECustChannel, 0, nullptr);
}

const EVENT_DESCRIPTOR Event_EDisabledChannel = {0x7, 0x0, 0x11, 0x0, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::EDisabledChannel()
{
    ETW_ENABLED_CHECK(0)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'EDisabledChannel'\n");
    EventWrite(ProviderHandle, &Event_EDisabledChannel, 0, nullptr);
}

const EVENT_DESCRIPTOR Event_EAnalyticChannel = {0x8, 0x0, 0x12, 0x0, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::EAnalyticChannel()
{
    ETW_ENABLED_CHECK(0)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'EAnalyticChannel'\n");
    EventWrite(ProviderHandle, &Event_EAnalyticChannel, 0, nullptr);
}

const EVENT_DESCRIPTOR Event_EDebugChannel = {0x9, 0x0, 0x13, 0x0, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::EDebugChannel()
{
    ETW_ENABLED_CHECK(0)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'EDebugChannel'\n");
    EventWrite(ProviderHandle, &Event_EDebugChannel, 0, nullptr);
}

const EVENT_DESCRIPTOR Event_ETraceClassicChan = {0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::ETraceClassicChan()
{
    ETW_ENABLED_CHECK(0)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'ETraceClassicChan'\n");
    EventWrite(ProviderHandle, &Event_ETraceClassicChan, 0, nullptr);
}

const EVENT_DESCRIPTOR Event_ESystemChan = {0xb, 0x0, 0x8, 0x4, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::ESystemChan()
{
    ETW_ENABLED_CHECK(2)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'ESystemChan'\n");
    EventWrite(ProviderHandle, &Event_ESystemChan, 0, nullptr);
}

const EVENT_DESCRIPTOR Event_EAppChannel = {0xc, 0x0, 0x9, 0x2, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::EAppChannel()
{
    ETW_ENABLED_CHECK(3)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'EAppChannel'\n");
    EventWrite(ProviderHandle, &Event_EAppChannel, 0, nullptr);
}

const EVENT_DESCRIPTOR Event_ESecChannel = {0xd, 0x0, 0xa, 0x1, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::ESecChannel()
{
    ETW_ENABLED_CHECK(4)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'ESecChannel'\n");
    EventWrite(ProviderHandle, &Event_ESecChannel, 0, nullptr);
}

const EVENT_DESCRIPTOR Event_EBitMap = {0xe, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::EBitMap(BitMap1 map)
{
    ETW_ENABLED_CHECK(0)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'EBitMap'\n");
    EVENT_DATA_DESCRIPTOR eventData[1];
    ETW_LITERAL_PARAM(const uint32_t, 0, map)
    EventWrite(ProviderHandle, &Event_EBitMap, _countof(eventData), eventData);
}

const EVENT_DESCRIPTOR Event_EValueMap = {0xf, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}; // IVCLOTK
void DemoProvider::EValueMap(ValMap1 map)
{
    ETW_ENABLED_CHECK(0)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'EValueMap'\n");
    EVENT_DATA_DESCRIPTOR eventData[1];
    ETW_LITERAL_PARAM(const uint32_t, 0, map)
    EventWrite(ProviderHandle, &Event_EValueMap, _countof(eventData), eventData);
}

class ProviderCleanup
{
public:
	~ProviderCleanup() { DemoProvider::Unregister(); }
};

static ProviderCleanup g_providerCleanup;
