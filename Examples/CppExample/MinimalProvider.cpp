// -----------------------------------------------------
//  This file was generated by EtwGen.exe
// -----------------------------------------------------

#define _WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <evntrace.h>
#include <evntprov.h>
#include <strsafe.h>
#include "MinimalProvider.h" 
#define ETW_DEBUG(...)
#define ETW_ENABLED_CHECK(enableBit) if ((ProviderEnableBits[enableBit >> 5] & (1 << (enableBit % 32))) == 0) { return; }

#define ETW_ANSI_PARAM(n, p) const char *arg##n = (p);\
    EventDataDescCreate(&eventData[n],\
            (arg##n != nullptr) ? arg##n : "NULL",\
            (arg##n != nullptr) ? (ULONG)(strlen(arg##n) + 1) : (ULONG)sizeof("NULL"));

#define ETW_UNICODE_PARAM(n, p) const wchar_t *arg##n = (p);\
    EventDataDescCreate(&eventData[n],\
            (arg##n != nullptr) ? arg##n : L"NULL",\
            (arg##n != nullptr) ? (ULONG)((wcslen(arg##n) + 1) * sizeof(wchar_t)) : (ULONG)sizeof(L"NULL"));

#define ETW_LITERAL_PARAM(type, n, p) type arg##n = (p);\
    EventDataDescCreate(&eventData[n], &arg##n, sizeof(arg##n));

#define ETW_PTR_PARAM(type, n, p) type arg##n = (p);\
    EventDataDescCreate(&eventData[n], arg##n, sizeof(*arg##n));

#define ETW_COUNTED_PTR_PARAM(type, n, p, l) type arg##n = (p);\
	EventDataDescCreate(&eventData[n], arg##n, (l) * sizeof(*arg##n));

static const char *etwManifest[] = {
    "<instrumentationManifest xmlns=\"http://schemas.microsoft.com/win/2004/08/events\">\r\n  <instrumentation xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"htt"
    "p://www.w3.org/2001/XMLSchema-instance\" xmlns:win=\"http://manifests.microsoft.com/win/2004/08/windows/events\">\r\n    <events xmlns=\"http://schemas.microsoft.com/"
    "win/2004/08/events\">\r\n      <provider name=\"PerformanceCounters\" guid=\"{5D762F10-0525-5E93-477E-3E8C8582DA52}\" symbol=\"PerformanceCounters\" resourceFileName=\"Pe"
    "rformanceCounters\" messageFileName=\"PerformanceCounters\">\r\n        <events>\r\n          <event symbol=\"PerfCounter\" value=\"0\" version=\"0\" task=\"BlaTask\" template"
    "=\"PerfCounter\">\r\n          </event>\r\n        </events>\r\n        <tasks>\r\n          <task name=\"BlaTask\" value=\"1\"   >\r\n          </task>\r\n          <task name=\""
    "EventSourceMessage\" value=\"65534\"   message=\"$(string.PerformanceCounters.task.EventSourceMessage.message)\">\r\n          </task>\r\n        </tasks>\r\n        <chan"
    "nels>\r\n          <importChannel name=\"TraceLogging\" chid=\"TraceLogging\"/>\r\n          <importChannel name=\"Security\" chid=\"Security\"/>\r\n          <importChannel "
    "name=\"Application\" chid=\"Application\"/>\r\n          <importChannel name=\"System\" chid=\"System\"/>\r\n          <importChannel name=\"TraceClassic\" chid=\"TraceClassic"
    "\"/>\r\n        </channels>\r\n        <keywords>\r\n          <keyword name=\"Session3\" symbol=\"Session3\" mask=\"0x100000000000\" message=\"$(string.PerformanceCounters.K"
    "eyword.Session3.message)\">\r\n          </keyword>\r\n          <keyword name=\"Session2\" symbol=\"Session2\" mask=\"0x200000000000\" message=\"$(string.PerformanceCounte"
    "rs.Keyword.Session2.message)\">\r\n          </keyword>\r\n          <keyword name=\"Session1\" symbol=\"Session1\" mask=\"0x400000000000\" message=\"$(string.PerformanceCo"
    "unters.Keyword.Session1.message)\">\r\n          </keyword>\r\n          <keyword name=\"Session0\" symbol=\"Session0\" mask=\"0x800000000000\" message=\"$(string.Performan"
    "ceCounters.Keyword.Session0.message)\">\r\n          </keyword>\r\n        </keywords>\r\n        <templates>\r\n          <template tid=\"PerfCounter\">\r\n            <dat"
    "a name=\"category\" inType=\"win:Int32\" outType=\"xs:int\"  >\r\n            </data>\r\n            <data name=\"instance\" inType=\"win:Int32\" outType=\"xs:int\"  >\r\n       "
    "     </data>\r\n            <data name=\"counter\" inType=\"win:Int32\" outType=\"xs:int\"  >\r\n            </data>\r\n          </template>\r\n        </templates>\r\n      <"
    "/provider>\r\n    </events>\r\n  </instrumentation>\r\n  <localization>\r\n    <resources culture=\"en-US\">\r\n      <stringTable>\r\n        <string id=\"PerformanceCounters"
    ".task.EventSourceMessage.message\" value=\"EventSourceMessage\">\r\n        </string>\r\n        <string id=\"PerformanceCounters.Keyword.Session0.message\" value=\"Sessi"
    "on0\">\r\n        </string>\r\n        <string id=\"PerformanceCounters.Keyword.Session1.message\" value=\"Session1\">\r\n        </string>\r\n        <string id=\"Performanc"
    "eCounters.Keyword.Session2.message\" value=\"Session2\">\r\n        </string>\r\n        <string id=\"PerformanceCounters.Keyword.Session3.message\" value=\"Session3\">\r\n "
    "       </string>\r\n      </stringTable>\r\n    </resources>\r\n  </localization>\r\n</instrumentationManifest>"
};

const GUID ProviderGuid = {0x5d762f10,0x0525,0x5e93,{0x47,0x7e,0x3e,0x8c,0x85,0x82,0xda,0x52}}; // 5d762f10-0525-5e93-477e-3e8c8582da52

static const int EnableBitsCount = 1;
static REGHANDLE                 ProviderHandle = (REGHANDLE)0;
static DECLSPEC_CACHEALIGN ULONG ProviderEnableBits[1];
static const ULONGLONG           ProviderKeywords[EnableBitsCount] = {0x0};
static const UCHAR               ProviderLevels[EnableBitsCount] = {0x0};

                                                //  Id      Vers Chan Lvl  Opcode Task   Keyword
static const EVENT_DESCRIPTOR Event_EmitManifest = {0xfffe, 0x1, 0x0, 0x0, 0xfe, 0xfffe, 0x00FFFFFFFFFFFFFF};
static void EmitManifest()
{
    if (!ProviderHandle)
    {
        ETW_DEBUG("ETW_DEBUG: Skipping manifest emission due to uninitialised provider handle\n");
        return;
    }

    unsigned char format        = 1;
    unsigned char majorVersion  = 1;
    unsigned char minorVersion  = 0;
    unsigned char magicNumber   = 0x5b;
    unsigned short totalChunks  = (unsigned short)_countof(etwManifest);

	for(unsigned short i = 0; i < totalChunks; i++)
	{
	    EVENT_DATA_DESCRIPTOR eventData[7];
		EventDataDescCreate(&eventData[0], &format,        sizeof(format));
		EventDataDescCreate(&eventData[1], &majorVersion,  sizeof(majorVersion));
		EventDataDescCreate(&eventData[2], &minorVersion,  sizeof(minorVersion));
		EventDataDescCreate(&eventData[3], &magicNumber,   sizeof(magicNumber));
		EventDataDescCreate(&eventData[4], &totalChunks,   sizeof(totalChunks));
		EventDataDescCreate(&eventData[5], &i,             sizeof(i));
	    EventDataDescCreate(&eventData[6], etwManifest[i], strlen(etwManifest[i]));
        ETW_DEBUG("ETW_DEBUG: Emitting manifest chunk %d of %d\n", i+1, totalChunks);
	    EventWrite(ProviderHandle, &Event_EmitManifest, _countof(eventData), eventData);
	}
}

static void __stdcall ControlCallbackV2(LPCGUID, ULONG controlCode, UCHAR level, ULONGLONG matchAnyKeyword, ULONGLONG matchAllKeyword, PEVENT_FILTER_DESCRIPTOR, PVOID)
{
    switch (controlCode)
    {
        case EVENT_CONTROL_CODE_ENABLE_PROVIDER:
            ETW_DEBUG("ETW_DEBUG: Provider enabled\n");
            for (ULONG ix = 0; ix < EnableBitsCount; ++ix)
            {
                bool levelMatched = (ProviderLevels[ix] <= level) || (level == 0);
                bool keywordMatched =
                    ((ProviderKeywords[ix] == (ULONGLONG)0) ||
                    ((ProviderKeywords[ix] & matchAnyKeyword) && ((ProviderKeywords[ix] & matchAllKeyword) == matchAllKeyword)));

                if (levelMatched && keywordMatched)
                {
                    ProviderEnableBits[ix >> 5] |= (1 << (ix % 32));
                }
                else
                {
                    ProviderEnableBits[ix >> 5] &= ~(1 << (ix % 32));
                }
            }
            EmitManifest();
            break;

        case EVENT_CONTROL_CODE_DISABLE_PROVIDER:
            ETW_DEBUG("ETW_DEBUG: Provider disabled\n");
            EmitManifest();
            if (EnableBitsCount > 0)
            {
                RtlZeroMemory(ProviderEnableBits, (EnableBitsCount + 31)/32 * sizeof(ULONG));
            }
            break;

        default:
            break;
    }
}

ULONG PerformanceCounters::Register() // This function registers the provider with ETW.
{
    if (ProviderHandle) // already registered
        return ERROR_SUCCESS;

    ETW_DEBUG("ETW_DEBUG: Registering provider\n");
    auto result = EventRegister(&ProviderGuid, ControlCallbackV2, nullptr, &ProviderHandle);
    if (ProviderHandle)
        EmitManifest();

    return result;
}

ULONG PerformanceCounters::Unregister() // Unregister the provider
{
    if (!ProviderHandle) // Provider has not been registered
        return ERROR_SUCCESS;

    ETW_DEBUG("ETW_DEBUG: Deregistering provider\n");
    EmitManifest();
    ULONG error = EventUnregister(ProviderHandle);
    ProviderHandle = (REGHANDLE)0;

    return error;
}

// Events
const EVENT_DESCRIPTOR Event_PerfCounter = {0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0}; // IVCLOTK
void PerformanceCounters::PerfCounter(int category, int instance, int counter)
{
    ETW_ENABLED_CHECK(0)
    ETW_DEBUG("ETW_DEBUG: Emitting event 'PerfCounter'\n");
    EVENT_DATA_DESCRIPTOR eventData[3];
    ETW_LITERAL_PARAM(const int32_t, 0, category)
    ETW_LITERAL_PARAM(const int32_t, 1, instance)
    ETW_LITERAL_PARAM(const int32_t, 2, counter)
    EventWrite(ProviderHandle, &Event_PerfCounter, _countof(eventData), eventData);
}

class ProviderCleanup
{
public:
	~ProviderCleanup() { PerformanceCounters::Unregister(); }
};

static ProviderCleanup g_providerCleanup;
