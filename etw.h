#pragma once
// == Version 0.2.0 == \\

namespace EtwIn
{
	enum Type
	{
		UnicodeString, // A string of 16-bit codepoints in the UTF-16 encoding, corresponds to LPWSTR etc.
		AnsiString, // A string of 8-bit codepoints, typically in the current system codepage. TODO: Investigate viability of UTF-8 etc.
		Int8, Int16, Int32, Int64, // Signed integers of the usual sizes
		UInt8, UInt16, UInt32, UInt64, // Unsigned integers of the usual sizes
		Float, // A 32-bit IEEE-754 single-precision floating point number
		Double, // A 64-bit IEEE-754 double-precision floating point number
		Bool, // A boolean value
		Binary, // Binary data, i.e. a collection of bytes.
		Guid, // A GUID / UUID
		Pointer, // A pointer to a memory address
		FileTime, // A Windows FILETIME structure.
		SystemTime, // A Windows SYSTEMTIME structure.
		Sid, // A Windows SID structure.
		HexInt32,
		HexInt64
	};
}

namespace EtwOut
{
	enum Type
	{
		String, Xml, ReducedString,
		Byte, UnsignedByte, HexInt8,
		Short, UnsignedShort, Port, HexInt16,
		Int, HResult, UnsignedInt, Pid, Tid, IPv4,
		EtwTime, ErrorCode, Win32Error, NtStatus, HexInt32,
		Long, UnsignedLong, HexInt64,
		Float, Double,
		Bool,
		HexBinary, IPv6, SocketAddress,
		Guid,
		DateTime, DateTimeCultureInsensitive
	};
}

// ETW_PROVIDER(className, [name=], [prefix=], [guid=], [symbol=], [resourceFilename=], [messageFilename=], [opcodes=auto|manual])
// Declares a new ETW provider for which code should be autogenerated by EtwGen
// If no GUID is specified, then one will be generated based on the hash of the name (or classname if no name is specified).
// This can then be activated in PerfView, Perspex etc without manifest registration by placing a * before the provider name.
#define ETW_PROVIDER_BEGIN(className, ...) \
class className \
{\
public:\
	static unsigned long Register();\
	static unsigned long Unregister();\
	static bool IsEnabled(unsigned char level, unsigned __int64 keyword);

#define ETW_PROVIDER_END };

// Declarations
#define ETW_KEYWORD(id, name, ...) static const unsigned __int64 Keyword_##name = id; // ETW_KEYWORD(id, name, [symbol=]) - Declare a custom keyword. Custom keywords should begin at 256 / 0x100.
#define ETW_OPCODE(id, name, ...) // ETW_OPCODE(id, name, [symbol=], [message=]) - Declare a custom opcode. Custom opcodes should begin at 11 / 0xB.
#define ETW_CHANNEL(name, type, ...) // ETW_CHANNEL(name, type, [enabled="true|false"], [symbol=], [chid=], [isolation=]) - Declare a custom channel. Custom channels should begin at 12 / 0xC.
#define ETW_LEVEL(id, name, ...) static const unsigned char Level_##name = id; // ETW_LEVEL(id, name, [symbol=], [message=]) - Declare a custom level. Custom levels should begin at 7.

// Default opcodes: win:DcStart win:DcStop win:Extension win:Info win:Receive win:Reply win:Resume win:Send win:Start win:Stop win:Suspend
// Default keywords: CorrelationHint, AuditSuccess, AuditFailure, SQM, WDIDiag, WDIContext, ResponseTime
// Default channels: TraceClassic, System, Application, Security
// Default levels: win:LogAlways win:Critical win:Error win:Warning win:Informational win:Verbose 

//#define ETW_VERSION(version)

// Sets the task for subsequent events until the next ETW_TASK_END
#define ETW_TASK_BEGIN(name, ...) // ETW_TASK_BEGIN(name, [id=], [guid=], [symbol=])
#define ETW_TASK_END

#define ETW_PUSH_KEYWORDS(...) // Adds to the current set of active keywords to be applied to subsequent events
#define ETW_POP_KEYWORDS // Reverts to the prior active keyword state

// Maps (i.e. enum types)
#define ETW_BITMAP(name, ...)   enum name { // ETW_BITMAP(name, [prefixToIgnore=]) - A bitfield/flags style enum
#define ETW_VALUEMAP(name, ...) enum name { // ETW_VALUEMAP(name, [prefixToIgnore=]) - A regular sequential style enum
#define ETW_MAP_END };
#define ETW_VALUEMAP_FROM_FILE(name, filename) enum name { };

// Parameters and implementation details
#define ETW_CUSTOM static void __cdecl
#define ETW_LEN(length) // Set the length for a string or binary parameter
#define ETW_COUNT(count) // Set the count for an array parameter
#define ETW_IN(x) // Set the input/storage type for an event parameter. Should use elements of the EtwIn::Type enum.
#define ETW_OUT(x) // Set the output/display type for an event parameter. Should use elements of the EtwOut::Type enum.
#define ETW_ACTIVITYID const GUID * // Marks this parameter as holding an activity id that should be transitioned to
#define ETW_RELATED_ACTIVITYID const GUID * // Marks this parameter as holding an associated activity id for correlating activities
//TODO: #define ETW_BIGSTRING(name) const char *

// ETW_EVENT(cppName, [id=], [name=], [symbol=], [message=], [keywords=], [level=], [opcode=], [channel=])
#define ETW_EVENT(cppName, ...) static void __cdecl cppName 
#define ETW_EVENT_V(cppName, ...) static void __cdecl cppName // level="win:Verbose"
#define ETW_EVENT_I(cppName, ...) static void __cdecl cppName // level="win:Informational"
#define ETW_EVENT_W(cppName, ...) static void __cdecl cppName // level="win:Warning"
#define ETW_EVENT_E(cppName, ...) static void __cdecl cppName // level="win:Error"
#define ETW_EVENT_C(cppName, ...) static void __cdecl cppName // level="win:Critical"

#define ETW_HEADER(...) // If this appears in the header, then the implementation file will include the given filename.

